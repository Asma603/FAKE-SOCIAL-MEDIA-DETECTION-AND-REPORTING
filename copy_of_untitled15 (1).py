# -*- coding: utf-8 -*-
"""Copy of Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kO5M99R4L08Xm_gVc7Mf4c3tfewAeYJP
"""

pip install faker

import pandas as pd
import random
from faker import Faker
fake = Faker()

# Generate mock data for notifications
def generate_mock_data(num_users, num_notifications):
    data = []
    categories = ["payment", "transaction", "offers", "reminders"]
    priorities = ["high", "normal", "low"]

    for user_id in range(1, num_users + 1):
        for _ in range(random.randint(1, num_notifications)):
            notification = {
                "user_id": user_id,
                "message": fake.sentence(nb_words=random.randint(5, 12)),
                "category": random.choice(categories),
                "priority": random.choice(priorities),
                "timestamp": fake.date_time_this_year().isoformat()
            }
            data.append(notification)
    return data

# Generate dataset
mock_data = generate_mock_data(num_users=10, num_notifications=20)

# Convert to DataFrame for easy handling
df = pd.DataFrame(mock_data)

# Save as a CSV file
df.to_csv("mock_paytm_notifications.csv", index=False)

print("Mock dataset saved as 'mock_paytm_notifications.csv'.")

import time
from collections import defaultdict

class NotificationManager:
    def __init__(self):
        self.user_notifications = defaultdict(list)  # Store notifications per user
        self.scheduled_notifications = defaultdict(list)  # Store scheduled notifications per user

    def add_notification(self, user_id, notification, priority="normal"):
        """
        Add a notification for a user with optional priority levels.
        """
        self.user_notifications[user_id].append({"message": notification, "priority": priority})

    def schedule_notifications(self, user_id, active_hours):
        """
        Schedule notifications for a user during their active hours.
        """
        current_hour = time.localtime().tm_hour
        if current_hour in active_hours:
            # Send high-priority notifications immediately
            notifications = [
                notif for notif in self.user_notifications[user_id]
                if notif["priority"] == "high"
            ]
            self.scheduled_notifications[user_id].extend(notifications)
        else:
            # Group all notifications for sending later
            self.scheduled_notifications[user_id].extend(self.user_notifications[user_id])

        # Clear immediate notifications after scheduling
        self.user_notifications[user_id] = []

    def send_notifications(self, user_id):
        """
        Send all scheduled notifications to the user.
        """
        if self.scheduled_notifications[user_id]:
            print(f"Sending notifications to user {user_id}:")
            for notif in self.scheduled_notifications[user_id]:
                print(f"- {notif['message']} (Priority: {notif['priority']})")
            # Clear sent notifications
            self.scheduled_notifications[user_id] = []

    def optimize_notifications(self, user_id, max_daily_limit):
        """
        Reduce notifications by keeping only the most important or recent ones.
        """
        if len(self.user_notifications[user_id]) > max_daily_limit:
            self.user_notifications[user_id] = sorted(
                self.user_notifications[user_id],
                key=lambda x: x["priority"],
                reverse=True
            )[:max_daily_limit]

# Example usage
if __name__ == "__main__":
    # Initialize notification manager
    manager = NotificationManager()

    # Add some notifications for a user
    manager.add_notification(1, "Flash Sale on electronics!", priority="high")
    manager.add_notification(1, "New offers on your favorite items!", priority="normal")
    manager.add_notification(1, "Your order has been shipped!", priority="high")

    # Schedule notifications for active hours
    manager.schedule_notifications(1, active_hours=[9, 10, 11])  # Active hours: 9 AM to 11 AM

    # Optimize notifications (e.g., set a max daily limit)
    manager.optimize_notifications(1, max_daily_limit=2)

    # Send notifications
    manager.send_notifications(1)

"""Priority-Based Notifications: Notifications are categorized as high or normal priority.
Active Hours Scheduling: Notifications are only sent during user-defined active hours.
Notification Optimization: Limits the number of notifications per day for a user.
This code can be integrated with Paytm's backend system and enhanced with more complex features like machine learning models to predict the best time for sending notifications and personalized content recommendations
"""

import time
from collections import defaultdict

class PaytmNotificationManager:
    def __init__(self):
        self.user_notifications = defaultdict(list)  # Store notifications per user
        self.scheduled_notifications = defaultdict(list)  # Store scheduled notifications per user
        self.daily_limit = 5  # Max number of notifications per day

    def add_notification(self, user_id, notification, category="general", priority="normal"):
        """
        Add a notification for a user with category and priority.
        """
        self.user_notifications[user_id].append({
            "message": notification,
            "category": category,
            "priority": priority,
            "timestamp": time.time()
        })

    def group_notifications(self, user_id):
        """
        Group similar notifications into a single message.
        """
        grouped = defaultdict(list)
        for notif in self.user_notifications[user_id]:
            grouped[notif["category"]].append(notif["message"])

        grouped_notifications = [
            {"message": f"{category}: {', '.join(messages)}", "priority": "normal"}
            for category, messages in grouped.items()
        ]
        self.user_notifications[user_id] = grouped_notifications

    def schedule_notifications(self, user_id, active_hours):
        """
        Schedule notifications for a user during their active hours.
        """
        current_hour = time.localtime().tm_hour
        if current_hour in active_hours:
            # Send only high-priority notifications immediately
            notifications = [
                notif for notif in self.user_notifications[user_id]
                if notif["priority"] == "high"
            ]
            self.scheduled_notifications[user_id].extend(notifications)
        else:
            # Group and save notifications for sending later
            self.group_notifications(user_id)
            self.scheduled_notifications[user_id].extend(self.user_notifications[user_id])

        # Clear immediate notifications after scheduling
        self.user_notifications[user_id] = []

    def send_notifications(self, user_id):
        """
        Send all scheduled notifications to the user.
        """
        if self.scheduled_notifications[user_id]:
            print(f"Sending notifications to user {user_id}:")
            for notif in self.scheduled_notifications[user_id]:
                print(f"- {notif['message']} (Priority: {notif['priority']})")
            # Clear sent notifications
            self.scheduled_notifications[user_id] = []

    def optimize_notifications(self, user_id):
        """
        Reduce notifications by keeping within daily limit.
        """
        if len(self.user_notifications[user_id]) > self.daily_limit:
            self.user_notifications[user_id] = sorted(
                self.user_notifications[user_id],
                key=lambda x: x["priority"],
                reverse=True
            )[:self.daily_limit]

# Example usage for Paytm
if __name__ == "__main__":
    # Initialize Paytm notification manager
    paytm_manager = PaytmNotificationManager()

    # Add some notifications for a user
    paytm_manager.add_notification(101, "Your electricity bill is due tomorrow.", category="payment", priority="high")
    paytm_manager.add_notification(101, "Flash Sale: Up to 50% off on groceries!", category="offers", priority="normal")
    paytm_manager.add_notification(101, "Payment successful for Rs. 500 to ABC Store.", category="transaction", priority="high")
    paytm_manager.add_notification(101, "New cashback offers on flight bookings.", category="offers", priority="normal")
    paytm_manager.add_notification(101, "Your loan EMI is due in 3 days.", category="payment", priority="high")

    # Schedule notifications for active hours (e.g., 9 AM to 8 PM)
    paytm_manager.schedule_notifications(101, active_hours=range(9, 21))

    # Optimize notifications for daily limits
    paytm_manager.optimize_notifications(101)

    # Send notifications
    paytm_manager.send_notifications(101)

"""Categorized Notifications: Notifications are grouped by category (e.g., payment, transaction, offers).
Priority Management: Critical notifications like payments or transactions are marked as high priority.
Daily Limit Enforcement: Limits the number of notifications sent to prevent user fatigue.
Active Hours Scheduling: Notifications are only sent during user-defined active hours (e.g., 9 AM to 8 PM).
Grouping Similar Notifications: Reduces clutter by combining multiple related notifications into a single message.
This system can be further enhanced with user behavior analysis, preference settings, and machine learning models to determine the best notification strategies
"""

